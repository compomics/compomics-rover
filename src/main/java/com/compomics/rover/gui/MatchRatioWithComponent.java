package com.compomics.rover.gui;

import com.compomics.rover.general.singelton.QuantitativeValidationSingelton;
import com.compomics.rover.general.quantitation.RatioType;

import javax.swing.*;
import java.util.Vector;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.*;

/**
 * Created by IntelliJ IDEA.
 * User: Niklaas
 * Date: 04-Feb-2010
 * Time: 07:56:53
 * To change this template use File | Settings | File Templates.
 */
public class MatchRatioWithComponent extends JFrame {
    private JLabel lblRatioType;
    private JButton matchButtonButton;
    private JPanel jpanComponent;
    private JPanel jpanContent;

    private Vector<String> iRatios;
    private Vector<String> iComponents;
    private Vector<JCheckBox> iCheckBoxes = new Vector<JCheckBox>();
    private int iRatioCount = 0;
    /**
     * This validation singelton holds information for the calculation of the ratio
     */
    private QuantitativeValidationSingelton iQuantitativeValidationSingelton = QuantitativeValidationSingelton.getInstance();

    public MatchRatioWithComponent() {


        $$$setupUI$$$();
        iRatios = iQuantitativeValidationSingelton.getRatioTypes();
        iComponents = iQuantitativeValidationSingelton.getComponentTypes();

        for (int i = 0; i < iComponents.size(); i++) {
            JCheckBox lTemp = new JCheckBox(iComponents.get(i));
            jpanComponent.add(Box.createVerticalGlue());
            jpanComponent.add(lTemp);
            iCheckBoxes.add(lTemp);
        }

        lblRatioType.setText(iRatios.get(0));


        //create the jframe
        this.setContentPane(jpanContent);
        this.setSize(600, 300);
        this.setLocation(250, 250);
        this.setVisible(true);

        matchButtonButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                //count the selected
                int lCount = 0;
                for (int i = 0; i < iCheckBoxes.size(); i++) {
                    if (iCheckBoxes.get(i).isSelected()) {
                        lCount = lCount + 1;
                    }
                }

                if (lCount == 2) {
                    String lRatio = lblRatioType.getText();
                    String[] lComponents = new String[2];
                    for (int i = 0; i < iCheckBoxes.size(); i++) {
                        if (iCheckBoxes.get(i).isSelected()) {
                            if (lComponents[0] == null) {
                                lComponents[0] = iCheckBoxes.get(i).getText();
                            } else {
                                lComponents[1] = iCheckBoxes.get(i).getText();
                            }
                        }
                    }
                    RatioType lType = new RatioType(lRatio, lComponents);
                    iQuantitativeValidationSingelton.addMatchedRatioTypes(lType);
                    iRatioCount = iRatioCount + 1;
                    if (iRatioCount >= iRatios.size()) {
                        //close this frame
                        close();
                    } else {
                        //show the next ratio
                        lblRatioType.setText(iRatios.get(iRatioCount));
                        for (int i = 0; i < iCheckBoxes.size(); i++) {
                            iCheckBoxes.get(i).setSelected(false);
                        }
                    }


                } else {
                    //the user must select two checkboxes
                    JOptionPane.showMessageDialog(new JFrame(), "Two components must be selected!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }

            }
        });


    }


    private void close() {
        this.setVisible(false);
        this.dispose();
    }

    private void createUIComponents() {
        jpanComponent = new JPanel();
        jpanComponent.setLayout(new BoxLayout(jpanComponent, BoxLayout.Y_AXIS));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        jpanContent = new JPanel();
        jpanContent.setLayout(new GridBagLayout());
        lblRatioType = new JLabel();
        lblRatioType.setText("LABEL");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        jpanContent.add(lblRatioType, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 5, 5, 5);
        jpanContent.add(jpanComponent, gbc);
        matchButtonButton = new JButton();
        matchButtonButton.setText("Match button");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        jpanContent.add(matchButtonButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jpanContent;
    }
}
